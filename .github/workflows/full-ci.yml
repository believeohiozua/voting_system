name: Full CI Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      mobile: ${{ steps.changes.outputs.mobile }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            backend:
              - 'backend/**'
            mobile:
              - 'mobile/**'

  backend-ci:
    needs: changes
    if: ${{ needs.changes.outputs.backend == 'true' }}
    uses: ./.github/workflows/backend-ci.yml

  mobile-ci:
    needs: changes
    if: ${{ needs.changes.outputs.mobile == 'true' }}
    uses: ./.github/workflows/mobile-ci.yml

  integration-test:
    runs-on: ubuntu-latest
    needs: [backend-ci, mobile-ci]
    if: always() && (needs.backend-ci.result == 'success' || needs.backend-ci.result == 'skipped') && (needs.mobile-ci.result == 'success' || needs.mobile-ci.result == 'skipped')

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: feature_voting
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Install mobile dependencies
        working-directory: ./mobile
        run: npm ci

      - name: Start backend server
        working-directory: ./backend/src
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/feature_voting
        run: |
          python manage.py migrate
          python manage.py runserver &
          sleep 10

      - name: Test API endpoints
        run: |
          # Test API is accessible
          curl -f http://localhost:8000/api/features/ || exit 1

          # Test Swagger documentation
          curl -f http://localhost:8000/ || exit 1

          # Test admin interface
          curl -f http://localhost:8000/admin/ || exit 1

      - name: Test mobile bundle creation
        working-directory: ./mobile
        run: |
          npx react-native bundle \
            --platform android \
            --dev false \
            --entry-file index.js \
            --bundle-output integration-test-bundle.js

  deploy-ready:
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deployment ready notification
        run: |
          echo "ðŸš€ All tests passed! Ready for deployment."
          echo "Backend and mobile applications are ready for production."
