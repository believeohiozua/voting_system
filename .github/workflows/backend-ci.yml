name: Backend CI

on:
  push:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "backend/**"
      - ".github/workflows/backend-ci.yml"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: feature_voting_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage

      - name: Run migrations
        working-directory: ./backend/src
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/feature_voting_test
        run: |
          python manage.py makemigrations
          python manage.py migrate

      - name: Run tests
        working-directory: ./backend/src
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/feature_voting_test
        run: |
          python manage.py test

      - name: Run tests with coverage
        working-directory: ./backend/src
        env:
          DATABASE_URL: postgresql://postgres:password@localhost:5432/feature_voting_test
        run: |
          coverage run --source='.' manage.py test
          coverage report
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/src/coverage.xml
          flags: backend
          name: backend-coverage

  # lint:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4

  #     - name: Set up Python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: "3.11"

  #     - name: Install linting tools
  #       run: |
  #         pip install black flake8 isort

  #     - name: Check code formatting with Black
  #       working-directory: ./backend/src
  #       run: black --check .

  #     - name: Lint with flake8
  #       working-directory: ./backend/src
  #       run: flake8 . --max-line-length=88 --exclude=migrations

  #     - name: Check import sorting with isort
  #       working-directory: ./backend/src
  #       run: isort --check-only .

  docker:
    runs-on: ubuntu-latest
    needs: [test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        working-directory: ./backend
        run: |
          docker build -t feature-voting-backend .

      - name: Test Docker image
        working-directory: ./backend
        run: |
          # Start database
          docker-compose up -d db
          sleep 10

          # Test the built image
          docker run --rm --network backend_default \
            -e DATABASE_URL=postgresql://postgres:password@db:5432/feature_voting \
            feature-voting-backend python manage.py check

          # Cleanup
          docker-compose down

  security:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install security tools
        run: |
          pip install safety bandit

      - name: Check for security vulnerabilities in dependencies
        working-directory: ./backend
        run: safety check -r requirements.txt

      - name: Run bandit security linter
        working-directory: ./backend/src
        run: bandit -r . -x */migrations/*
