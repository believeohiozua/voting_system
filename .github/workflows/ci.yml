name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  backend-tests:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: password
          POSTGRES_USER: postgres
          POSTGRES_DB: feature_voting_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Django tests
        env:
          DB_NAME: feature_voting_test
          DB_USER: postgres
          DB_PASSWORD: password
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          cd backend/src
          python manage.py test

      - name: Run Django tests with coverage
        env:
          DB_NAME: feature_voting_test
          DB_USER: postgres
          DB_PASSWORD: password
          DB_HOST: localhost
          DB_PORT: 5432
        run: |
          cd backend/src
          coverage run --source='.' manage.py test
          coverage report
          coverage xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/src/coverage.xml
          flags: backend
          name: backend-coverage

  mobile-tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: mobile/package-lock.json

      - name: Install dependencies
        run: |
          cd mobile
          npm ci

      - name: Run mobile tests
        run: |
          cd mobile
          npm test -- --coverage --watchAll=false

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./mobile/coverage/lcov.info
          flags: mobile
          name: mobile-coverage

  lint-and-format:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install Python linting tools
        run: |
          pip install black flake8 isort

      - name: Check Python code formatting
        run: |
          cd backend/src
          black --check .
          flake8 .
          isort --check-only .

      - name: Install Node dependencies and lint
        run: |
          cd mobile
          npm ci
          npm run lint

  build-docker:
    runs-on: ubuntu-latest
    needs: [backend-tests]

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          cd backend
          docker build -t feature-voting-backend .

      - name: Test Docker image
        run: |
          cd backend
          docker-compose up -d db
          sleep 10
          docker run --rm --network backend_default \
            -e DB_HOST=db \
            -e DB_NAME=feature_voting \
            -e DB_USER=postgres \
            -e DB_PASSWORD=password \
            feature-voting-backend python manage.py check
